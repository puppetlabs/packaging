<?xml version='1.0' encoding='UTF-8'?>
<matrix-project>
  <actions/>
  <description>&lt;p&gt;&#xd;
    Dynamically created job to generate the MSI for this version of Puppet&#xd;
&#xd;
The artifacts are sent out to builds.delivery.puppetlabs.net
&lt;p&gt;&#xd;
This job will trigger the downstream job supplied with DOWNSTREAM_JOB if passed to rake in the upstream invocation.&#xd;
&lt;/p&gt;&#xd;
</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>3</daysToKeep>
    <numToKeep>1</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.plugins.hipchat.HipChatNotifier_-HipChatJobProperty plugin="hipchat-plugin@0.1.0">
      <room></room>
      <startNotification>false</startNotification>
    </jenkins.plugins.hipchat.HipChatNotifier_-HipChatJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@1.2.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>origin</name>
        <refspec>+refs/heads/*:refs/remotes/origin/*</refspec>
        <url><%= Pkg::Config.build_msi["puppet_for_the_win"]["repo"] %></url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name><%= Pkg::Config.build_msi["puppet_for_the_win"]["ref"] %></name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <ignoreNotifyCommit>false</ignoreNotifyCommit>
    <useShallowClone>false</useShallowClone>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>true</skipTag>
    <includedRegions></includedRegions>
    <scmName></scmName>
  </scm>
  <assignedNode>win-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>ARCH</name>
      <values>
        <string>x64</string>
        <string>x86</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>win-build</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <builders>
    <hudson.tasks.Shell>
      <command>#!ruby.exe

require &apos;yaml&apos;

puts &quot;arch is #{ENV[&apos;ARCH&apos;]}&quot;

if ENV[&apos;ARCH&apos;] == &quot;x64&quot;
  SYS_REF=&apos;<%= Pkg::Config.build_msi["sys"]["ref"]["x64"] %>&apos;
<% if Pkg::Config.build_msi["cfacter"] -%>
  CFACTER=&apos;<%= Pkg::Config.build_msi["cfacter"]["archive"]["x64"] %>&apos;
<% end -%>
else
  SYS_REF=&apos;<%= Pkg::Config.build_msi["sys"]["ref"]["x86"] %>&apos;
<% if Pkg::Config.build_msi["cfacter"] -%>
  CFACTER=&apos;<%= Pkg::Config.build_msi["cfacter"]["archive"]["x86"] %>&apos;
<% end -%>
end

CONFIG = {
  :repos =&gt; {
    &apos;puppet&apos; =&gt; {
      :ref =&gt; &apos;<%= ref %>&apos;,
      :repo =&gt; &quot;#{ENV[&apos;WORKSPACE&apos;]}/puppet-<%= Pkg::Config.version %>-signing_bundle&quot;
    },
<% Pkg::Config.build_msi.each do |project, info| -%>
<% next if project == "puppet_for_the_win" || project == "cfacter" -%>
    &apos;<%= project %>&apos; =&gt; {
      :ref =&gt; &quot;<%= ('#{SYS_REF}' if project == "sys") || info["ref"] %>&quot;,
      :repo =&gt; &apos;<%= info["repo"] %>&apos;
    },
<% end -%>
<% if Pkg::Config.build_msi["cfacter"] -%>
    &apos;cfacter&apos; =&gt; {
      :archive =&gt; &quot;#{CFACTER}&quot;,
      :path =&gt; &apos;<%= Pkg::Config.build_msi["cfacter"]["path"] %>&apos;
    },
<% end -%>
  }
}

File.open(&quot;#{ENV[&apos;WORKSPACE&apos;]}/ondemand.yaml&quot;, &apos;w&apos;) { |f| f.write(YAML.dump(CONFIG)) }</command>
    </hudson.tasks.Shell>
    <hudson.tasks.BatchFile>
      <command>
REM Print the environment
set

set PKG_NAME=<%= Pkg::Config.msi_name || 'puppet' %>
set AGENT_VERSION_STRING=<%= Pkg::Util::Version.git_describe_version %>
set ARCH=%ARCH%
set SUFFIX=-%ARCH%
if &quot;%ARCH%&quot; == &quot;x86&quot; (
  set SUFFIX=
)

echo %CD%
set ORIG_PATH=/opt/jenkins-builds/puppet/<%= Pkg::Config.ref %>/artifacts
set GIT_BUNDLE=puppet-<%= Pkg::Config.version %>-signing_bundle.tar.gz
set BUILD_HOST=jenkins@builds.delivery.puppetlabs.net
scp %BUILD_HOST%:%ORIG_PATH%/%GIT_BUNDLE% .
tar xf %GIT_BUNDLE%

cmd.exe /c rake clobber windows:build config=ondemand.yaml

pushd pkg

REM If we are shipping the old version of puppet, in the 3.x series, we need to maintain established naming conventions.
REM For 3, we ship two msi's, one with a `-x64` suffix, and one with no architecture suffix at all. In order to
REM maintain that convention, we need to change the name of the installer we are shipping, either from puppet-x64.msi to puppet-%version%-x64.msi,
REM or from puppet.msi to puppet-%version%.msi. However, for windows installers in the puppet 4 series, we don't want to change the name at all,
REM which will already be set at puppet-agent-%version%-%arch%.msi
REM We also have to do this in multiple checks, because %MSI_NAME% is not updated until after the check ends...
set MSI_NAME=%PKG_NAME%-%AGENT_VERSION_STRING%-%ARCH%.msi
if exist %PKG_NAME%%SUFFIX%.msi (
  set MSI_NAME=%PKG_NAME%-%AGENT_VERSION_STRING%%SUFFIX%.msi
)
if exist %PKG_NAME%%SUFFIX%.msi (
  move %PKG_NAME%%SUFFIX%.msi %MSI_NAME%
)

set DEST_PATH=%ORIG_PATH%/windows
ssh %BUILD_HOST% &quot;mkdir -p %DEST_PATH%&quot;
REM rsync -avg --ignore-existing %MSI_NAME% %BUILD_HOST%:%DEST_PATH%
scp -B %MSI_NAME% %BUILD_HOST%:%DEST_PATH%

echo Puppet&apos;s package name is: %PKG_NAME%
echo Puppet&apos;s version is: %AGENT_VERSION_STRING%
echo Puppet&apos;s arch is: %ARCH%
echo Find the msi at: http://builds.delivery.puppetlabs.net/puppet/<%= Pkg::Config.ref %>/artifacts/windows/%MSI_NAME%

popd</command>
    </hudson.tasks.BatchFile>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.16">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
          </configs>
          <projects><%= "#{Pkg::Config.project}-repo-#{Pkg::Config.build_date}-#{Pkg::Config.ref}" %></projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    </publishers>
    <buildWrappers/>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
</matrix-project>
